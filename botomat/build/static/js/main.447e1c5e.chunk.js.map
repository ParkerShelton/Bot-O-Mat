{"version":3,"sources":["app/components/button/Button.js","app/components/header/Header.js","app/components/footer/Footer.js","app/components/emptyRobotList/EmptyRobotList.js","app/components/robotIcons/RobotIcons.js","app/components/task/Task.js","app/components/robot/Robot.js","app/components/form/Form.js","app/components/form/EditForm.js","app/components/home/Home.js","app/App.js","serviceWorker.js","index.js"],"names":["Button","_this","this","react_default","a","createElement","onClick","props","handleBtnClick","className","alt","src","Component","Header","components_button_Button","text","htmlFor","placeholder","id","pattern","onChange","e","handleSearchChange","Footer","EmptyRobotList","RobotIcons","Task","componentDidMount","setTimeout","taskCompleted","robotId","task","eta","renderCheckmark","isCompleted","colorOfPoints","points","description","toLowerCase","replace","c","toUpperCase","Robot","renderTasks","robot","tasks","map","index","components_task_Task","key","getPlace","place","robots","findIndex","concat","_this2","type","deleteRobot","name","score","completed","remaining","Form","renderTypes","robotTypes","value","closeModal","formData","handleChange","addRobot","EditForm","componentWillMount","url","fetch","then","res","json","resJSON","setState","getEditingRobot","editRobot","Home","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderModal","state","showAddModal","components_form_Form","showEditModal","form_EditForm","selectedRobot","propshandleChange","renderRobotIcons","showIcons","handleIconClick","formType","hideRobotsOnEmpty","robotList","length","preventDefault","renderRobots","sort","b","search","searchString","trim","filter","match","components_robot_Robot","changeEmptyRobots","renderEmptyRobotList","showEmptyRobots","components_emptyRobotList_EmptyRobotList","target","emptyRobotList","components_header_Header","components_robotIcons_RobotIcons","components_footer_Footer","App","fetchFullRobots","fetchRobotTypes","generateId","Math","floor","random","selectedRobotId","selectedTaskId","i","j","updatedRobotList","addRobotToState","newRobot","updatedRobots","push","updateRobotsInState","updatedRobot","toConsumableArray","console","log","bodyData","method","headers","Accept","Content-Type","body","JSON","stringify","assignRobotTasks","forEach","taskId","newRobotList","components_home_Home","Boolean","window","location","hostname","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.447e1c5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../../Globals.css';\nimport './Button.css';\n\nclass Button extends Component {\n  render() {\n    return (\n      <div onClick={() => this.props.handleBtnClick(\"add\")} className=\"Button\">\n        <img alt=\"Add Robot\" src=\"/botomat/imgs/button/addButtn.png\" />\n      </div>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport Button from '../button/Button';\nimport '../../Globals.css';\nimport './Header.css';\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <div className=\"Header\">\n        <div className=\"headerContainer\">\n          <h1>Bot-O-Mat</h1>\n\n          <div className=\"addBtnContainer\">\n            <Button handleBtnClick={this.props.handleBtnClick} text=\"Add Robot\"/>\n            <p>Add Robot</p>\n          </div>\n\n\n          <label htmlFor=\"search\"></label>\n          <input placeholder=\"Search\" id=\"search\" pattern=\"[A-Za-z]+\" onChange={(e) => this.props.handleSearchChange(e)}/>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport '../../Globals.css';\nimport './Footer.css';\n\nclass Footer extends Component {\n\n  render() {\n    return (\n      <div className=\"Footer\">\n        <h2>Bot-O-Mat</h2>\n\n        <p>&copy; 2018 Parker Shelton Inc.</p>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport '../../Globals.css';\nimport './EmptyRobotList.css';\n\nclass EmptyRobotList extends Component {\n\n  render() {\n    return (\n      <div className=\"EmptyRobotList\">\n        <img alt=\"Empty Robots\" src=\"/botomat/imgs/home/emptyRobots.svg\" />\n        <h2>Woah.. It looks like you have no robots! You should add some with the button at the top of the page. They are free, so why not? Pick your robot carefully depending on the tasks you need done!</h2>\n      </div>\n    );\n  }\n}\n\nexport default EmptyRobotList;\n","import React, { Component } from 'react';\nimport '../../Globals.css';\nimport './RobotIcons.css';\n\nclass RobotIcons extends Component {\n \n  render() {\n    return (\n      <div className=\"RobotIcons\">\n\n        <div className=\"robotIconContainer\">\n          <div className=\"robotCard\">\n            <img alt=\"Unipedal\" src=\"/botomat/imgs/robot/Unipedal.png\" />\n            <h3>Unipedal</h3>\n            <p>Tasks they can do</p>\n            <ul>\n              <li>1. Do the laundry</li>\n              <li>2. Take out the recycling</li>\n              <li>3. Mow the lawn</li>\n              <li>4. Rake the leaves</li>\n              <li>5. Give the dog a bath</li>\n              <li>6. Bake some cookies</li>\n            </ul>\n          </div>\n\n          <div className=\"robotCard\">\n            <img alt=\"Unipedal\" src=\"/botomat/imgs/robot/Bipedal.png\" />\n            <h3>Bipedal</h3>\n            <p>Tasks they can do</p>\n            <ul>\n              <li>1. Do the dishes</li>\n              <li>2. Sweep the house</li>\n              <li>3. Take out the recycling</li>\n              <li>4. Make a sammich</li>\n              <li>5. Give the dog a bath</li>\n              <li>6. Wash the car</li>\n            </ul>\n          </div>\n\n          <div className=\"robotCard\">\n            <img alt=\"Unipedal\" src=\"/botomat/imgs/robot/Quadrupedal.png\" />\n            <h3>Quadrupedal</h3>\n            <p>Tasks they can do</p>\n            <ul>\n              <li>1. Do the dishes</li>\n              <li>2. Sweep the house</li>\n              <li>3. Do the laundry</li>\n              <li>4. Take out the recycling</li>\n              <li>5. Bake some cookies</li>\n              <li>6. Wash the car</li>\n            </ul>\n          </div>\n\n          <div className=\"robotCard\">\n            <img alt=\"Unipedal\" src=\"/botomat/imgs/robot/Arachnid.png\" />\n            <h3>Arachnid</h3>\n            <p>Tasks they can do</p>\n            <ul>\n              <li>1. Do the dishes</li>\n              <li>2. Make a sammich</li>\n              <li>3. Mow the lawn</li>\n              <li>4. Rake the leaves</li>\n              <li>5. Bake some cookies</li>\n              <li>6. Wash the car</li>\n            </ul>\n          </div>\n\n          <div className=\"robotCard\">\n            <img alt=\"Unipedal\" src=\"/botomat/imgs/robot/Radial.png\" />\n            <h3>Radial</h3>\n            <p>Tasks they can do</p>\n            <ul>\n              <li>1. Sweep the house</li>\n              <li>2. Do the laundry</li>\n              <li>3. Take out the recycling</li>\n              <li>4. Make a sammich</li>\n              <li>5. Mow the lawn</li>\n              <li>6. Rake the leaves</li>\n              <li>7. Give the dog a bath</li>\n              <li>8. Bake some cookies</li>\n              <li>9. Wash the car</li>\n            </ul>\n          </div>\n\n          <div className=\"robotCard\">\n            <img alt=\"Unipedal\" src=\"/botomat/imgs/robot/Aeronautical.png\" />\n            <h3>Aeronautical</h3>\n            <p>Tasks they can do</p>\n            <ul>\n              <li>1. Do the dishes</li>\n              <li>2. Sweep the house</li>\n              <li>3. Do the laundry</li>\n              <li>4. Make a sammich</li>\n              <li>5. Mow the lawn</li>\n              <li>6. Rake the leaves</li>\n              <li>7. Give the dog a bath</li>\n            </ul>\n          </div>                                                            \n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default RobotIcons;\n","import React, { Component } from 'react';\nimport '../../Globals.css';\nimport './Task.css';\n\nclass Task extends Component {\n\n  componentDidMount = () => {\n    setTimeout(() => this.props.taskCompleted(this.props.robotId, this.props.task.id), this.props.task.eta);\n  }\n\n  renderCheckmark = () => {\n    if(this.props.task.isCompleted === 0) {\n      return \"/botomat/imgs/robot/uncheck.png\";\n    } else if(this.props.task.isCompleted === 1){\n      return \"/botomat/imgs/robot/check.png\";\n    }\n  }\n\n  colorOfPoints = () => {\n    if(this.props.task.points === 0) {\n      return \"points none\";\n    } else {\n      return \"points\";\n    }\n  }\n\n  render() {\n\n    const description = (this.props.task.description.toLowerCase()).replace(/^\\w/, c => c.toUpperCase());\n\n    return (\n      <li className=\"Task\">\n        <p className=\"desc\">{description}</p>\n        <p className={this.colorOfPoints()}>{this.props.task.points}pts</p>\n        <img alt=\"Checkbox\" src={this.renderCheckmark()}/>\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React, { Component } from 'react';\nimport Task from '../task/Task';\nimport '../../Globals.css';\nimport './Robot.css';\n\nclass Robot extends Component {\n\n  renderTasks = () => {\n    \n    if(this.props.robot.tasks !== null) {\n      let taskList = this.props.robot.tasks.map((task, index) => {\n        return <Task robotId={this.props.robot.id} taskCompleted={this.props.taskCompleted} key={index} task={task}/>\n      });\n      return taskList;\n\n    } else {\n\n      return null;\n    }\n  }\n\n  getPlace = () => {\n    let place = (this.props.robots.findIndex((robot) => robot.id === this.props.robot.id) + 1);\n\n    if(place === 1) {\n      return \"1st\";\n    } else if(place === 2) {\n      return \"2nd\";\n    } else if(place === 3) {\n      return \"3rd\";\n    } else {\n      return `${place}th`;\n    }\n  }\n\n\n  render() {\n\n    const type = (this.props.robot.type.toLowerCase()).replace(/^\\w/, c => c.toUpperCase());\n\n    return (\n      <div className=\"Robot\">\n        <img src=\"/botomat/imgs/robot/deleteButton.png\" alt=\"Delete Button\" className=\"deleteBtn\" onClick={() => this.props.deleteRobot(this.props.robot.id)}/>\n\n        <div className=\"robotCard\">\n          <div className=\"leftSide\">\n            <img className=\"profileImg\" alt=\"Robot Profile\" src={`/botomat/imgs/robot/${type}.png`} />\n\n            {/* <p>{this.getPlace()}</p> */}\n\n            <h1><span>{this.getPlace()}</span> {this.props.robot.name} - {type}</h1>\n          </div>\n\n        </div>\n\n        <div className=\"dropdown\">\n\n          <div className=\"dropdownLeft\">\n            <h2>Tasks</h2>\n\n            <div className=\"taskCountContainer\">\n              <p>Score: {this.props.robot.score}</p>\n              <p>Completed: {this.props.robot.completed}</p>\n              <p>Remaining: {this.props.robot.remaining}</p>\n            </div>\n          </div>\n\n          <div className=\"dropdownRight\">\n            <ul>\n              {this.renderTasks()}\n            </ul>          \n          </div>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Robot;\n","import React, { Component } from 'react';\nimport '../../Globals.css';\nimport './Form.css';\n\nclass Form extends Component {\n\n  renderTypes = () => {\n    if(this.props.robotTypes !== null) {\n      const typeList = this.props.robotTypes.map((type, index) => {\n        return <option key={index} value={type.value}>{type.name}</option>\n      });\n      return typeList;\n\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"Form\">\n        \n        <form>\n          {/* <button onClick={(e) => this.props.closeModal(e, \"add\")} className=\"closeBtn\">X</button> */}\n          <img alt=\"Close\" onClick={(e) => this.props.closeModal(e, \"add\")} className=\"closeBtn\" src=\"/botomat/imgs/robot/deleteButton.png\" />\n\n          <fieldset>\n            <legend>Create A Robot</legend>\n\n            <p>\n              <label htmlFor=\"name\">Robot's Name:</label>\n              <input value={this.props.formData.name} onChange={(e) => this.props.handleChange(e, 'name')} type=\"text\" id=\"name\" name=\"robotName\"/>\n            </p>\n\n            <p>\n              <label htmlFor=\"type\">Robot's Type:</label>\n              <select value={this.props.formData.type} onChange={(e) => this.props.handleChange(e, 'type')} id=\"type\">\n                {this.renderTypes()}\n              </select>\n            </p>\n          </fieldset>\n\n          <div className=\"btnContainer\">\n            <button type=\"button\" onClick={() => this.props.addRobot()} className=\"createBtn\">Create Robot</button>\n          </div>\n\n        </form>\n\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport '../../Globals.css';\nimport './Form.css';\n\nclass EditForm extends Component {\n\n  componentWillMount = () => {  \n\n    const url = `http://198.74.55.173:5001/robots/${this.props.robot.id}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robot: resJSON});\n      }); \n  }\n\n  renderTypes = () => {\n    if(this.props.robotTypes !== null) {\n      const typeList = this.props.robotTypes.map((type, index) => {\n        return <option key={index} value={type.value}>{type.name}</option>\n      });\n      return typeList;\n\n    } else {\n      return null;\n    }\n  }\n\n  getEditingRobot = (id) => {\n    const url = `http://198.74.55.173:5001/robots/${id}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robot: resJSON});\n      });    \n  }\n\n  render() {\n\n    return (\n      <div className=\"EditForm\">\n        <form>\n          <button onClick={(e) => this.props.closeModal(e, \"edit\")} className=\"closeBtn\">X</button>\n\n          <fieldset>\n            <legend>Edit the Robot</legend>\n\n            <p>\n              <label htmlFor=\"name\">Robot's Name:</label>\n              <input placeholder={this.props.robot.name} onChange={(e) => this.props.handleChange(e, 'name')} type=\"text\" id=\"name\" name=\"robotName\"/>\n            </p>\n\n            <p>\n              <label htmlFor=\"type\">Robot's Type:</label>\n              <select value={this.props.robot.type} onChange={(e) => this.props.handleChange(e, 'type')} id=\"type\">\n                {this.renderTypes()}\n              </select>\n            </p>\n          </fieldset>\n\n          <div className=\"btnContainer\">\n            <button onClick={() => this.props.editRobot(this.props.robot.id)} className=\"createBtn\">Change Robot</button>\n          </div>\n\n        </form>\n\n      </div>\n    );\n  }\n}\n\nexport default EditForm;\n","import React, { Component } from 'react';\nimport Header from '../header/Header';\nimport Footer from '../footer/Footer';\nimport EmptyRobotList from '../emptyRobotList/EmptyRobotList';\n// import Button from '../button/Button';\nimport RobotIcons from '../robotIcons/RobotIcons';\nimport Robot from '../robot/Robot';\nimport Form from '../form/Form';\nimport EditForm from '../form/EditForm';\nimport '../../Globals.css';\nimport './Home.css';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showAddModal: false,\n      showEditModal: false,\n      showIcons: \"Hide Icons\",\n      emptyRobotList: true,\n      searchString: \"\",\n    }\n  }\n\n  renderModal = () => {\n    if(this.state.showAddModal === true) {\n      return <Form \n        formData={this.props.formData} \n        addRobot={this.props.addRobot} \n        handleChange={this.props.handleChange} \n        robotTypes={this.props.robotTypes} \n        closeModal={this.closeModal} \n      />\n\n    } else if(this.state.showEditModal === true) {\n\n       return <EditForm \n        robot={this.state.selectedRobot}  \n        editRobot={this.props.editRobot} \n        handleChange={this.propshandleChange} \n        robotTypes={this.props.robotTypes} \n        closeModal={this.closeModal} \n       />     \n    }\n  }\n\n  renderRobotIcons = () => {\n    if(this.state.showIcons === \"Hide Icons\") {\n      return \"RobotIcons\";\n    } else {\n      return \"RobotIcons hide\";\n    }\n  }\n\n  handleIconClick = () => {\n    if(this.state.showIcons === \"Hide Icons\") {\n      this.setState({showIcons: \"Show Icons\"});\n    } else {\n      this.setState({showIcons: \"Hide Icons\"});\n    }\n  }\n\n  handleBtnClick = (formType, robot) => {\n    if(formType === \"add\" && this.state.showAddModal === false) {\n      this.setState({showAddModal: true});\n    }\n\n    if(formType === \"edit\" && this.state.showEditModal === false) {\n      this.setState({\n        showEditModal: true,\n        selectedRobot: robot\n      });\n    }\n  }\n\n  hideRobotsOnEmpty = () => {\n\n    if(this.props.robotList !== null) {\n      if(this.props.robotList.length > 0) {\n        return \"robotListContainer\";\n      } else {\n        return \"robotListContainer hide\";\n      }\n    }\n  }\n\n  closeModal = (e, formType) => {\n    e.preventDefault();\n\n    if(formType === \"add\" && this.state.showAddModal === true) {\n      this.setState({showAddModal: false});\n    } else if (formType === \"edit\" && this.state.showEditModal === true) {\n      this.setState({showEditModal: false});\n    }\n  }\n\n  renderRobots = () => {\n    if(this.props.robotList !== null) {\n      let robots = this.props.robotList.sort((a, b) => a.score < b.score);\n      let search = this.state.searchString.trim().toLowerCase();  \n\n      // this.setState({emptyRobotList: false});\n\n      if(search.length > 0) {\n        robots = robots.filter((robot) => {\n          return robot.name.toLowerCase().match(search);\n        });\n        return robots.map((robot) => {\n          return <Robot \n            robots={robots} \n            taskCompleted={this.props.taskCompleted} \n            handleBtnClick={this.handleBtnClick} \n            deleteRobot={this.props.deleteRobot} \n            robot={robot} \n            key={robot.id} \n            changeEmptyRobots={this.changeEmptyRobots}\n          />\n        });\n\n      } else {\n        return robots.map((robot) => {\n          return <Robot \n            robots={robots} \n            taskCompleted={this.props.taskCompleted} \n            handleBtnClick={this.handleBtnClick} \n            deleteRobot={this.props.deleteRobot} \n            robot={robot} \n            key={robot.id} \n          />\n        });\n      }\n\n    } else {\n      return null;\n    }\n  }\n\n  renderEmptyRobotList = () => {\n    if(this.props.showEmptyRobots === true) {\n      return <EmptyRobotList />;\n    } else {\n      return null;\n    }\n  }\n\n  handleSearchChange = (e) => {\n    this.setState({searchString: e.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <Header handleSearchChange={this.handleSearchChange} handleBtnClick={this.handleBtnClick}/>\n        {this.renderModal()}\n\n        <div className=\"contentContainer\">\n\n          {this.renderEmptyRobotList()}\n\n          <div className={this.hideRobotsOnEmpty()}>\n            {this.renderRobots()}\n          </div>  \n\n          <RobotIcons showIcons={this.state.showIcons} renderRobotIcons={this.renderRobotIcons} />\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Home from './components/home/Home';\nimport './Globals.css';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      robotList: null,\n      robotTypes: null,\n      selectedRobot: null,\n      showEmptyRobots: true,\n\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    }\n  }\n\n  componentWillMount = () => {\n    this.fetchFullRobots();\n    this.fetchRobotTypes();\n  };\n\n  // componentDidMount = () => {\n  //   if(this.state.robotList !== null){\n  //     if(this.state.robotList.length > 0) {\n  //       console.log(\"greater than 0\");\n  //       this.setState({showEmptyRobots: false});\n  //     } else {\n  //       this.setState({showEmptyRobots: true});\n  //     }        \n  //   }  \n  // }\n\n  generateId = () => {\n    return Math.floor(Math.random() * 10000) + 1;\n  }\n\n\n  taskCompleted = (selectedRobotId, selectedTaskId) => {\n    for(var i = 0; i < this.state.robotList.length; i++) {\n\n      if(this.state.robotList[i].id === selectedRobotId) {\n        for(var j = 0; j < 5; j++) {\n\n          if(this.state.robotList[i].tasks[j].id === selectedTaskId) {\n            let updatedRobotList = this.state.robotList;\n\n            updatedRobotList[i].tasks[j].isCompleted = 1\n            updatedRobotList[i].score += updatedRobotList[i].tasks[j].points;\n\n            if(updatedRobotList[i].completed < 5) {\n              updatedRobotList[i].completed ++;\n            }\n            if(updatedRobotList[i].remaining > 0) {\n              updatedRobotList[i].remaining --;\n            }\n\n            this.setState({\n              robotList: updatedRobotList\n            });\n          }\n        }\n      }\n    }\n\n  }\n\n\n  addRobotToState = (newRobot) => {\n    // let updatedRobots = [...this.state.robotList, newRobot];\n    let updatedRobots = this.state.robotList;\n    updatedRobots.push(newRobot);\n    this.setState({robotList: updatedRobots});\n  }\n\n  updateRobotsInState = (updatedRobot) => {\n    const index = this.state.robotList.findIndex(robot => robot.id === updatedRobot.id);    \n\n    const robotList = [...this.state.robotList];\n    robotList[index] = updatedRobot;\n\n    this.setState({robotList});    \n  }\n\n  handleChange = (e, name) => {\n    let formData = this.state.formData;\n\n    formData[name] = e.target.value;\n    this.setState({formData});\n    console.log(this.state.formData);\n  }\n\n\n/*---------------------------*/\n//         API CALLS\n/*---------------------------*/\n\n\n/////////////////////\n  fetchFullRobots = () => {\n   const url = \"http://198.74.55.173:5001/robots/full\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n\n        if(resJSON.length > 0) {\n          this.setState({showEmptyRobots: false});\n        } else {\n          this.setState({showEmptyRobots: true});\n        } \n      });    \n  }\n\n/////////////////////\n  fetchRobotTypes = () => {\n    const url = \"http://198.74.55.173:5001/types\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotTypes: resJSON});\n      });    \n  }\n\n  // fetchSingleRobot = (robotId) => {\n  //   const url = `http://localhost:5000/robot/${robotId}`;\n\n  //   fetch(url)\n  //     .then((res) => res.json())\n  //     .then((resJSON) => {\n  //       console.log(resJSON);\n  //     })\n  // }\n\n\n/////////////////////\n  addRobot = () => {\n\n    this.setState({})\n\n    const bodyData = {\n      id: this.generateId(),\n      name: this.state.formData.name,\n      type: this.state.formData.type,\n      place: 0,\n      score: 0\n    };\n\n    fetch(\"http://198.74.55.173:5001/robots\", {\n      method: 'POST',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(bodyData)\n\n    }).then((res) => {\n      return res.json(); \n\n    }).then ((resJSON) => {\n      // this.addRobotToState(resJSON);\n      this.setState({showEmptyRobots: false});\n      this.assignRobotTasks(bodyData.id);\n      // this.fetchSingleRobot(bodyData.id);\n    });\n  }\n\n//////////////////\n  assignRobotTasks = (robotId) => {\n    const tasks = [];\n    const url = \"http://198.74.55.173:5001/tasks/random\";\n    \n    fetch(url)\n      .then((res) => {\n        return res.json();\n      }).then((resJSON) => {\n        \n        resJSON.forEach(task => {\n          tasks.push(task);\n        });\n      }).then(() => {\n\n        for(let i = 0; i < 5; i++) {\n\n          const bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n          };\n\n\n          fetch(\"http://198.74.55.173:5001/robots/full\", {\n                method: 'POST',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(bodyData)\n\n              }).then((res) => {\n                res.json()}\n              ).then(() => {\n                this.fetchFullRobots();\n              })\n        }\n      })\n  }\n\n\n/////////////////////\n  editRobot = (id) => {\n    if(id !== null) {\n      const url = `http://198.74.55.173:5001/robots/${id}`;\n\n      fetch(url, {\n        method: 'PUT',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.state.formData)\n      }).then(res => {\n        return res.json();\n      }).then((resJSON) => {\n        this.updateRobotsInState(resJSON);\n      });\n\n    }\n  }\n\n\n\n/////////////////////\n  deleteRobot = (id) => {\n    if(id !== null) {\n      const url = `http://198.74.55.173:5001/robots/${id}`;\n\n      fetch(url, {\n        method: 'DELETE',\n      }).then(res => {\n        console.log(\"Deleted Robot\");\n        return res.json();\n\n      }).then(() => {\n        const newRobotList = this.state.robotList.filter(robot => robot.id !== id);\n\n        this.setState({robotList: newRobotList});\n\n        if(this.state.robotList.length > 0) {\n          this.setState({showEmptyRobots: false});\n        } else {\n          this.setState({showEmptyRobots: true});\n        }\n      });\n    }\n  }\n/*---------------------------*/\n//            \n/*---------------------------*/\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"contentContainer\">\n          <Home \n            formData={this.state.formData} \n            robotList={this.state.robotList} \n            robotTypes={this.state.robotTypes}\n            renderRobots={this.renderRobots} \n            renderModal={this.renderModal} \n            handleChange={this.handleChange}\n            addRobot={this.addRobot}\n            deleteRobot={this.deleteRobot}\n            taskCompleted={this.taskCompleted}\n            showEmptyRobots={this.state.showEmptyRobots}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}