{"ast":null,"code":"import _toConsumableArray from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/App.js\";\nimport React, { Component } from 'react';\nimport Button from './components/button/Button';\nimport Robot from './components/robot/Robot';\nimport Form from './components/form/Form';\nimport EditForm from './components/form/EditForm';\nimport './Globals.css';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.componentWillMount = function () {\n      _this.fetchRobots();\n\n      _this.fetchRobotTypes();\n\n      _this.fetchTasks();\n    };\n\n    _this.generateId = function () {\n      return Math.floor(Math.random() * 10000) + 1;\n    };\n\n    _this.updateRobotsInState = function (updatedRobot) {\n      var index = _this.state.robotList.findIndex(function (robot) {\n        return robot.id === updatedRobot.id;\n      });\n\n      var robotList = _toConsumableArray(_this.state.robotList);\n\n      robotList[index] = updatedRobot;\n\n      _this.setState({\n        products: products\n      });\n    };\n\n    _this.renderModal = function () {\n      if (_this.state.showAddModal === true) {\n        return React.createElement(Form, {\n          formData: _this.state.formData,\n          addRobot: _this.addRobot,\n          handleChange: _this.handleChange,\n          robotTypes: _this.state.robotTypes,\n          closeModal: _this.closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      } else if (_this.state.showEditModal === true) {\n        return React.createElement(EditForm, {\n          handleChange: _this.handleChange,\n          robotTypes: _this.state.robotTypes,\n          closeModal: _this.closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        });\n      }\n    };\n\n    _this.handleBtnClick = function (formType) {\n      if (formType === \"add\" && _this.state.showAddModal === false) {\n        _this.setState({\n          showAddModal: true\n        });\n      }\n\n      if (formType === \"edit\" && _this.state.showEditModal === false) {\n        _this.setState({\n          showEditModal: true\n        });\n      }\n    };\n\n    _this.closeModal = function (e, formType) {\n      e.preventDefault();\n\n      if (formType === \"add\" && _this.state.showAddModal === true) {\n        _this.setState({\n          showAddModal: false\n        });\n      } else if (formType === \"edit\" && _this.state.showEditModal === true) {\n        _this.setState({\n          showEditModal: false\n        });\n      }\n    };\n\n    _this.renderRobots = function () {\n      if (_this.state.robotList !== null) {\n        var robotList = _this.state.robotList.map(function (robot) {\n          return React.createElement(Robot, {\n            handleBtnClick: _this.handleBtnClick,\n            editRobot: _this.editRobot,\n            deleteRobot: _this.deleteRobot,\n            robot: robot,\n            key: robot.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          });\n        });\n\n        return robotList;\n      } else {\n        return null;\n      }\n    };\n\n    _this.handleChange = function (e, name) {\n      var formData = _this.state.formData;\n      formData[name] = e.target.value;\n\n      _this.setState({\n        formData: formData\n      });\n\n      console.log(_this.state.formData);\n    };\n\n    _this.fetchRobots = function () {\n      var url = \"http://localhost:5000/robots\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.fetchRobotTypes = function () {\n      var url = \"http://localhost:5000/types\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotTypes: resJSON\n        });\n      });\n    };\n\n    _this.fetchTasks = function () {\n      var url = \"http://localhost:5000/tasks\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          tasks: resJSON\n        });\n      }).then(function () {// this.assignRobotTasks();\n      });\n    };\n\n    _this.addRobot = function () {\n      var bodyData = {\n        id: _this.generateId(),\n        name: _this.state.formData.name,\n        type: _this.state.formData.type\n      };\n      fetch(\"http://localhost:5000/robots\", {\n        method: 'POST',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(bodyData)\n      }).then(function (res) {\n        return res.json();\n      }).then(function () {\n        _this.assignRobotTasks(bodyData.id);\n      });\n    };\n\n    _this.assignRobotTasks = function (robotId) {\n      var tasks = [];\n      var url = \"http://localhost:5000/tasks/random\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        resJSON.forEach(function (task) {\n          tasks.push(task);\n        });\n      }).then(function () {\n        for (var i = 0; i < 5; i++) {\n          var currentDate = new Date();\n          var time = \"\".concat(currentDate.getHours()).concat(currentDate.getMinutes()).concat(currentDate.getSeconds());\n          var bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n            completed: 0,\n            timeAssigned: time,\n            timeFinished: 0,\n            elapsedTime: null\n          };\n          return fetch(\"http://localhost:5000/robots/full\", {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(bodyData)\n          }).then(function (res) {\n            console.log(\"IM HERE!!!\");\n            return res.json();\n          });\n        }\n      }).then(function (res) {\n        console.log(res);\n      });\n    };\n\n    _this.getFullRobots = function () {\n      var url = \"http://localhost:5000/robots/full\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.editRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n      }\n    };\n\n    _this.deleteRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'DELETE'\n        }).then(function (res) {\n          console.log(\"Deleted Robot\");\n          return res.json();\n        }).then(function () {\n          var newRobotList = _this.state.robotList.filter(function (robot) {\n            return robot.id !== id;\n          });\n\n          _this.setState({\n            robotList: newRobotList\n          });\n        });\n      }\n    };\n\n    _this.state = {\n      robotList: null,\n      robotTypes: null,\n      tasks: null,\n      showAddModal: false,\n      showEditModal: false,\n      lastId: null,\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*---------------------------*/\n    //            \n\n    /*---------------------------*/\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Bot-O-Mat\"), this.renderModal(), React.createElement(\"div\", {\n        className: \"contentContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(Button, {\n        handleBtnClick: this.handleBtnClick,\n        text: \"Add Robot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"robotListContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, this.renderRobots())));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/App.js"],"names":["React","Component","Button","Robot","Form","EditForm","App","props","componentWillMount","fetchRobots","fetchRobotTypes","fetchTasks","generateId","Math","floor","random","updateRobotsInState","updatedRobot","index","state","robotList","findIndex","robot","id","setState","products","renderModal","showAddModal","formData","addRobot","handleChange","robotTypes","closeModal","showEditModal","handleBtnClick","formType","e","preventDefault","renderRobots","map","editRobot","deleteRobot","name","target","value","console","log","url","fetch","then","res","json","resJSON","tasks","bodyData","type","method","headers","body","JSON","stringify","assignRobotTasks","robotId","forEach","task","push","i","currentDate","Date","time","getHours","getMinutes","getSeconds","taskId","completed","timeAssigned","timeFinished","elapsedTime","getFullRobots","newRobotList","filter","lastId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from './components/button/Button';\nimport Robot from './components/robot/Robot';\nimport Form from './components/form/Form';\nimport EditForm from './components/form/EditForm';\nimport './Globals.css';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      robotList: null,\n      robotTypes: null,\n      tasks: null,\n      showAddModal: false,\n      showEditModal: false,\n      lastId: null,\n\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    }\n  }\n\n  componentWillMount = () => {\n    this.fetchRobots();\n    this.fetchRobotTypes();\n    this.fetchTasks();\n  };\n\n\n  generateId = () => {\n    return Math.floor(Math.random() * 10000) + 1;\n  }\n\n\n  updateRobotsInState = (updatedRobot) => {\n    const index = this.state.robotList.findIndex(robot => robot.id === updatedRobot.id);    \n\n    const robotList = [...this.state.robotList];\n    robotList[index] = updatedRobot;\n\n    this.setState({products});    \n  }\n\n\n  renderModal = () => {\n    if(this.state.showAddModal === true) {\n      return <Form formData={this.state.formData} addRobot={this.addRobot} handleChange={this.handleChange} robotTypes={this.state.robotTypes} closeModal={this.closeModal} />\n\n    } else if(this.state.showEditModal === true) {\n\n       return <EditForm handleChange={this.handleChange} robotTypes={this.state.robotTypes} closeModal={this.closeModal} />     \n    }\n  }\n\n  handleBtnClick = (formType) => {\n    if(formType === \"add\" && this.state.showAddModal === false) {\n      this.setState({showAddModal: true});\n    }\n\n    if(formType === \"edit\" && this.state.showEditModal === false) {\n      this.setState({showEditModal: true});\n    }\n  }\n\n  closeModal = (e, formType) => {\n    e.preventDefault();\n    \n\n    if(formType === \"add\" && this.state.showAddModal === true) {\n      this.setState({showAddModal: false});\n    } else if (formType === \"edit\" && this.state.showEditModal === true) {\n      this.setState({showEditModal: false});\n    }\n  }\n\n  renderRobots = () => {\n    if(this.state.robotList !== null) {\n      \n      const robotList = this.state.robotList.map((robot) => {\n        return <Robot handleBtnClick={this.handleBtnClick} editRobot={this.editRobot} deleteRobot={this.deleteRobot} robot={robot} key={robot.name} />\n      });\n      return robotList;\n\n    } else {\n      return null;\n    }\n  }\n\n  handleChange = (e, name) => {\n    let formData = this.state.formData;\n\n    formData[name] = e.target.value;\n    this.setState({formData});\n    console.log(this.state.formData);\n  }\n\n\n/*---------------------------*/\n//         API CALLS\n/*---------------------------*/\n\n\n  fetchRobots = () => {\n    const url = \"http://localhost:5000/robots\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });\n  }\n\n/////////////////////\n  fetchRobotTypes = () => {\n    const url = \"http://localhost:5000/types\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotTypes: resJSON});\n      });    \n  }\n\n/////////////////////\n  fetchTasks = () => {\n    const url = \"http://localhost:5000/tasks\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({tasks: resJSON});\n      }).then(() => {\n        // this.assignRobotTasks();\n      }); \n  }\n\n/////////////////////\n  addRobot = () => {\n\n    const bodyData = {\n      id: this.generateId(),\n      name: this.state.formData.name,\n      type: this.state.formData.type\n    };\n\n    fetch(\"http://localhost:5000/robots\", {\n      method: 'POST',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(bodyData)\n\n    }).then((res) => {\n      return res.json(); \n\n    }).then (() => {\n      this.assignRobotTasks(bodyData.id);\n    });\n  }\n\n//////////////////\n  assignRobotTasks = (robotId) => {\n    const tasks = [];\n    const url = \"http://localhost:5000/tasks/random\";\n    \n    fetch(url)\n      .then((res) => {\n        return res.json();\n      }).then((resJSON) => {\n        \n        resJSON.forEach(task => {\n          tasks.push(task);\n        });\n      }).then(() => {\n\n        for(let i = 0; i < 5; i++) {\n          const currentDate = new Date();\n          const time = `${currentDate.getHours()}${currentDate.getMinutes()}${currentDate.getSeconds()}`;\n\n          const bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n            completed: 0,\n            timeAssigned: time,\n            timeFinished: 0,\n            elapsedTime: null\n          };\n      \n          return fetch(\"http://localhost:5000/robots/full\", {\n                method: 'POST',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(bodyData)\n\n              }).then((res) => {\n                console.log(\"IM HERE!!!\");\n                return res.json(); \n\n              });\n        }\n      }).then((res) => {\n        console.log(res);\n      })\n  }\n\n/////////////////////\n  getFullRobots = () => {\n   const url = \"http://localhost:5000/robots/full\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });    \n  }\n\n\n/////////////////////\n  editRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n\n    }\n  }\n\n\n\n/////////////////////\n  deleteRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'DELETE',\n      }).then(res => {\n        console.log(\"Deleted Robot\");\n        return res.json();\n\n      }).then(() => {\n        const newRobotList = this.state.robotList.filter(robot => robot.id !== id);\n\n        this.setState({robotList: newRobotList});\n      });\n    }\n  }\n\n/*---------------------------*/\n//            \n/*---------------------------*/\n\n\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <h1>Bot-O-Mat</h1>\n\n        {this.renderModal()}\n        \n        <div className=\"contentContainer\">\n          <Button handleBtnClick={this.handleBtnClick} text=\"Add Robot\"/>\n\n          <div className=\"robotListContainer\">\n            {this.renderRobots()}\n          </div>  \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}