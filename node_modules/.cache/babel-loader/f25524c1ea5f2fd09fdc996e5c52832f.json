{"ast":null,"code":"import _toConsumableArray from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/App.js\";\nimport React, { Component } from 'react';\nimport Button from './components/button/Button';\nimport Robot from './components/robot/Robot';\nimport Form from './components/form/Form';\nimport EditForm from './components/form/EditForm';\nimport './Globals.css';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.componentWillMount = function () {\n      _this.fetchRobots();\n\n      _this.fetchRobotTypes();\n\n      _this.fetchTasks();\n    };\n\n    _this.generateId = function () {\n      return Math.floor(Math.random() * 10000) + 1;\n    };\n\n    _this.updateRobotsInState = function (updatedRobot) {\n      var index = _this.state.robotList.findIndex(function (robot) {\n        return robot.id === updatedRobot.id;\n      });\n\n      var robotList = _toConsumableArray(_this.state.robotList);\n\n      robotList[index] = updatedRobot;\n\n      _this.setState({\n        robotList: robotList\n      });\n    };\n\n    _this.renderModal = function () {\n      if (_this.state.showAddModal === true) {\n        return React.createElement(Form, {\n          formData: _this.state.formData,\n          addRobot: _this.addRobot,\n          handleChange: _this.handleChange,\n          robotTypes: _this.state.robotTypes,\n          closeModal: _this.closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        });\n      } else if (_this.state.showEditModal === true) {\n        return React.createElement(EditForm, {\n          robot: _this.state.selectedRobot,\n          editRobot: _this.editRobot,\n          handleChange: _this.handleChange,\n          robotTypes: _this.state.robotTypes,\n          closeModal: _this.closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        });\n      }\n    };\n\n    _this.handleBtnClick = function (formType, robot) {\n      if (formType === \"add\" && _this.state.showAddModal === false) {\n        _this.setState({\n          showAddModal: true\n        });\n      }\n\n      if (formType === \"edit\" && _this.state.showEditModal === false) {\n        _this.setState({\n          showEditModal: true,\n          selectedRobot: robot\n        });\n      }\n    };\n\n    _this.closeModal = function (e, formType) {\n      e.preventDefault();\n\n      if (formType === \"add\" && _this.state.showAddModal === true) {\n        _this.setState({\n          showAddModal: false\n        });\n      } else if (formType === \"edit\" && _this.state.showEditModal === true) {\n        _this.setState({\n          showEditModal: false\n        });\n      }\n    };\n\n    _this.renderRobots = function () {\n      if (_this.state.robotList !== null) {\n        var robotList = _this.state.robotList.map(function (robot) {\n          return React.createElement(Robot, {\n            handleBtnClick: _this.handleBtnClick,\n            deleteRobot: _this.deleteRobot,\n            robot: robot,\n            key: robot.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          });\n        });\n\n        return robotList;\n      } else {\n        return null;\n      }\n    };\n\n    _this.handleChange = function (e, name) {\n      var formData = _this.state.formData;\n      formData[name] = e.target.value;\n\n      _this.setState({\n        formData: formData\n      });\n\n      console.log(_this.state.formData);\n    };\n\n    _this.fetchRobots = function () {\n      var url = \"http://localhost:5000/robots\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.fetchRobotTypes = function () {\n      var url = \"http://localhost:5000/types\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotTypes: resJSON\n        });\n      });\n    };\n\n    _this.fetchTasks = function () {\n      var url = \"http://localhost:5000/tasks\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          tasks: resJSON\n        });\n      }).then(function () {// this.assignRobotTasks();\n      });\n    };\n\n    _this.addRobot = function () {\n      _this.setState({});\n\n      var bodyData = {\n        id: _this.generateId(),\n        name: _this.state.formData.name,\n        type: _this.state.formData.type\n      };\n      fetch(\"http://localhost:5000/robots\", {\n        method: 'POST',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(bodyData)\n      }).then(function (res) {\n        return res.json();\n      }).then(function () {\n        _this.assignRobotTasks(bodyData.id);\n      });\n    };\n\n    _this.assignRobotTasks = function (robotId) {\n      var tasks = [];\n      var url = \"http://localhost:5000/tasks/random\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        resJSON.forEach(function (task) {\n          tasks.push(task);\n        });\n      }).then(function () {\n        for (var i = 0; i < 5; i++) {\n          // const currentDate = new Date();\n          // const time = `${currentDate.getHours()}${currentDate.getMinutes()}${currentDate.getSeconds()}`;\n          var bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n            completed: 0,\n            timeAssigned: 222222,\n            timeFinished: 0,\n            elapsedTime: null\n          };\n          console.log(\"BEFORE FETCH\");\n          fetch(\"http://localhost:5000/robots/full\", {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(bodyData)\n          }).then(function (res) {\n            console.log(\"INSIDE FETCH\");\n            return res.json();\n          });\n        }\n\n        console.log(\"AFTER FETCH\");\n      });\n    };\n\n    _this.getFullRobots = function () {\n      var url = \"http://localhost:5000/robots/full\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.editRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'PUT',\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(_this.state.formData)\n        }).then(function (res) {\n          return res.json();\n        }).then(function (resJSON) {\n          _this.updateRobotsInState(resJSON);\n        });\n      }\n    };\n\n    _this.deleteRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'DELETE'\n        }).then(function (res) {\n          console.log(\"Deleted Robot\");\n          return res.json();\n        }).then(function () {\n          var newRobotList = _this.state.robotList.filter(function (robot) {\n            return robot.id !== id;\n          });\n\n          _this.setState({\n            robotList: newRobotList\n          });\n        });\n      }\n    };\n\n    _this.state = {\n      robotList: null,\n      robotTypes: null,\n      tasks: null,\n      showAddModal: false,\n      showEditModal: false,\n      selectedRobot: null,\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*---------------------------*/\n    //            \n\n    /*---------------------------*/\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, \"Bot-O-Mat\"), this.renderModal(), React.createElement(\"div\", {\n        className: \"contentContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(Button, {\n        handleBtnClick: this.handleBtnClick,\n        text: \"Add Robot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"robotListContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, this.renderRobots())));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/App.js"],"names":["React","Component","Button","Robot","Form","EditForm","App","props","componentWillMount","fetchRobots","fetchRobotTypes","fetchTasks","generateId","Math","floor","random","updateRobotsInState","updatedRobot","index","state","robotList","findIndex","robot","id","setState","renderModal","showAddModal","formData","addRobot","handleChange","robotTypes","closeModal","showEditModal","selectedRobot","editRobot","handleBtnClick","formType","e","preventDefault","renderRobots","map","deleteRobot","name","target","value","console","log","url","fetch","then","res","json","resJSON","tasks","bodyData","type","method","headers","body","JSON","stringify","assignRobotTasks","robotId","forEach","task","push","i","taskId","completed","timeAssigned","timeFinished","elapsedTime","getFullRobots","newRobotList","filter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from './components/button/Button';\nimport Robot from './components/robot/Robot';\nimport Form from './components/form/Form';\nimport EditForm from './components/form/EditForm';\nimport './Globals.css';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      robotList: null,\n      robotTypes: null,\n      tasks: null,\n      showAddModal: false,\n      showEditModal: false,\n      selectedRobot: null,\n\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    }\n  }\n\n  componentWillMount = () => {\n    this.fetchRobots();\n    this.fetchRobotTypes();\n    this.fetchTasks();\n  };\n\n  generateId = () => {\n    return Math.floor(Math.random() * 10000) + 1;\n  }\n\n\n\n\n  updateRobotsInState = (updatedRobot) => {\n    const index = this.state.robotList.findIndex(robot => robot.id === updatedRobot.id);    \n\n    const robotList = [...this.state.robotList];\n    robotList[index] = updatedRobot;\n\n    this.setState({robotList});    \n  }\n\n\n  renderModal = () => {\n    if(this.state.showAddModal === true) {\n      return <Form formData={this.state.formData} addRobot={this.addRobot} handleChange={this.handleChange} robotTypes={this.state.robotTypes} closeModal={this.closeModal} />\n\n    } else if(this.state.showEditModal === true) {\n\n       return <EditForm robot={this.state.selectedRobot}  editRobot={this.editRobot} handleChange={this.handleChange} robotTypes={this.state.robotTypes} closeModal={this.closeModal} />     \n    }\n  }\n\n  handleBtnClick = (formType, robot) => {\n    if(formType === \"add\" && this.state.showAddModal === false) {\n      this.setState({showAddModal: true});\n    }\n\n    if(formType === \"edit\" && this.state.showEditModal === false) {\n      this.setState({\n        showEditModal: true,\n        selectedRobot: robot\n      });\n    }\n\n  }\n\n  closeModal = (e, formType) => {\n    e.preventDefault();\n    \n\n    if(formType === \"add\" && this.state.showAddModal === true) {\n      this.setState({showAddModal: false});\n    } else if (formType === \"edit\" && this.state.showEditModal === true) {\n      this.setState({showEditModal: false});\n    }\n  }\n\n  renderRobots = () => {\n    if(this.state.robotList !== null) {\n      \n      const robotList = this.state.robotList.map((robot) => {\n        return <Robot handleBtnClick={this.handleBtnClick} deleteRobot={this.deleteRobot} robot={robot} key={robot.name} />\n      });\n      return robotList;\n\n    } else {\n      return null;\n    }\n  }\n\n  handleChange = (e, name) => {\n    let formData = this.state.formData;\n\n    formData[name] = e.target.value;\n    this.setState({formData});\n    console.log(this.state.formData);\n  }\n\n\n/*---------------------------*/\n//         API CALLS\n/*---------------------------*/\n\n\n  fetchRobots = () => {\n    const url = \"http://localhost:5000/robots\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });\n  }\n\n/////////////////////\n  fetchRobotTypes = () => {\n    const url = \"http://localhost:5000/types\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotTypes: resJSON});\n      });    \n  }\n\n/////////////////////\n  fetchTasks = () => {\n    const url = \"http://localhost:5000/tasks\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({tasks: resJSON});\n      }).then(() => {\n        // this.assignRobotTasks();\n      }); \n  }\n\n/////////////////////\n  addRobot = () => {\n\n    this.setState({})\n\n    const bodyData = {\n      id: this.generateId(),\n      name: this.state.formData.name,\n      type: this.state.formData.type\n    };\n\n    fetch(\"http://localhost:5000/robots\", {\n      method: 'POST',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(bodyData)\n\n    }).then((res) => {\n      return res.json(); \n\n    }).then (() => {\n      this.assignRobotTasks(bodyData.id);\n    });\n  }\n\n//////////////////\n  assignRobotTasks = (robotId) => {\n    const tasks = [];\n    const url = \"http://localhost:5000/tasks/random\";\n    \n    fetch(url)\n      .then((res) => {\n        return res.json();\n      }).then((resJSON) => {\n        \n        resJSON.forEach(task => {\n          tasks.push(task);\n        });\n      }).then(() => {\n\n        for(let i = 0; i < 5; i++) {\n          // const currentDate = new Date();\n          // const time = `${currentDate.getHours()}${currentDate.getMinutes()}${currentDate.getSeconds()}`;\n\n          const bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n            completed: 0,\n            timeAssigned: 222222,\n            timeFinished: 0,\n            elapsedTime: null\n          };\n\n          console.log(\"BEFORE FETCH\");\n          fetch(\"http://localhost:5000/robots/full\", {\n                method: 'POST',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(bodyData)\n\n              }).then((res) => {\n                console.log(\"INSIDE FETCH\");\n                return res.json(); \n\n              });\n        }\n          console.log(\"AFTER FETCH\");\n      })\n  }\n\n/////////////////////\n  getFullRobots = () => {\n   const url = \"http://localhost:5000/robots/full\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });    \n  }\n\n\n/////////////////////\n  editRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'PUT',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.state.formData)\n      }).then(res => {\n        return res.json();\n      }).then((resJSON) => {\n        this.updateRobotsInState(resJSON);\n      });\n\n    }\n  }\n\n\n\n/////////////////////\n  deleteRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'DELETE',\n      }).then(res => {\n        console.log(\"Deleted Robot\");\n        return res.json();\n\n      }).then(() => {\n        const newRobotList = this.state.robotList.filter(robot => robot.id !== id);\n\n        this.setState({robotList: newRobotList});\n      });\n    }\n  }\n\n/*---------------------------*/\n//            \n/*---------------------------*/\n\n\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <h1>Bot-O-Mat</h1>\n        {this.renderModal()}\n\n        <div className=\"contentContainer\">\n          <Button handleBtnClick={this.handleBtnClick} text=\"Add Robot\"/>\n\n          <div className=\"robotListContainer\">\n            {this.renderRobots()}\n          </div>  \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}