{"ast":null,"code":"import _toConsumableArray from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/App.js\";\nimport React, { Component } from 'react';\nimport Home from './components/home/Home'; // import Button from './components/button/Button';\n// import Robot from './components/robot/Robot';\n// import Form from './components/form/Form';\n// import EditForm from './components/form/EditForm';\n\nimport './Globals.css';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.componentWillMount = function () {\n      _this.fetchRobots();\n\n      _this.fetchRobotTypes();\n\n      _this.fetchTasks();\n\n      _this.fetchFullRobot();\n    };\n\n    _this.generateId = function () {\n      return Math.floor(Math.random() * 10000) + 1;\n    };\n\n    _this.updateRobotsInState = function (updatedRobot) {\n      var index = _this.state.robotList.findIndex(function (robot) {\n        return robot.id === updatedRobot.id;\n      });\n\n      var robotList = _toConsumableArray(_this.state.robotList);\n\n      robotList[index] = updatedRobot;\n\n      _this.setState({\n        robotList: robotList\n      });\n    };\n\n    _this.fetchRobots = function () {\n      var url = \"http://localhost:5000/robots\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.fetchFullRobot = function () {\n      var url = \"http://localhost:5000/robots/full\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        console.log(resJSON);\n      });\n    };\n\n    _this.fetchRobotTypes = function () {\n      var url = \"http://localhost:5000/types\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotTypes: resJSON\n        });\n      });\n    };\n\n    _this.fetchTasks = function () {\n      var url = \"http://localhost:5000/tasks\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          tasks: resJSON\n        });\n      }).then(function () {// this.assignRobotTasks();\n      });\n    };\n\n    _this.addRobot = function () {\n      _this.setState({});\n\n      var bodyData = {\n        id: _this.generateId(),\n        name: _this.state.formData.name,\n        type: _this.state.formData.type\n      };\n      fetch(\"http://localhost:5000/robots\", {\n        method: 'POST',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(bodyData)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.assignRobotTasks(bodyData.id);\n      });\n    };\n\n    _this.assignRobotTasks = function (robotId) {\n      var tasks = [];\n      var url = \"http://localhost:5000/tasks/random\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        resJSON.forEach(function (task) {\n          tasks.push(task);\n        });\n      }).then(function () {\n        for (var i = 0; i < 5; i++) {\n          // const currentDate = new Date();\n          // const time = `${currentDate.getHours()}${currentDate.getMinutes()}${currentDate.getSeconds()}`;\n          var bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n            completed: 0,\n            timeAssigned: 222222,\n            timeFinished: 0,\n            elapsedTime: null\n          };\n          console.log(\"BEFORE FETCH\");\n          fetch(\"http://localhost:5000/robots/full\", {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(bodyData)\n          }).then(function (res) {\n            console.log(\"INSIDE FETCH\");\n            return res.json();\n          });\n        }\n\n        console.log(\"AFTER FETCH\");\n      });\n    };\n\n    _this.getFullRobots = function () {\n      var url = \"http://localhost:5000/robots/full\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.editRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'PUT',\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(_this.state.formData)\n        }).then(function (res) {\n          return res.json();\n        }).then(function (resJSON) {\n          _this.updateRobotsInState(resJSON);\n        });\n      }\n    };\n\n    _this.deleteRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'DELETE'\n        }).then(function (res) {\n          console.log(\"Deleted Robot\");\n          return res.json();\n        }).then(function () {\n          var newRobotList = _this.state.robotList.filter(function (robot) {\n            return robot.id !== id;\n          });\n\n          _this.setState({\n            robotList: newRobotList\n          });\n        });\n      }\n    };\n\n    _this.state = {\n      robotList: null,\n      robotTypes: null,\n      tasks: null,\n      // showAddModal: false,\n      // showEditModal: false,\n      selectedRobot: null,\n      fullRobots: null,\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*---------------------------*/\n    //            \n\n    /*---------------------------*/\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(Home, {\n        renderRobots: this.renderRobots,\n        renderModal: this.renderModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/App.js"],"names":["React","Component","Home","App","props","componentWillMount","fetchRobots","fetchRobotTypes","fetchTasks","fetchFullRobot","generateId","Math","floor","random","updateRobotsInState","updatedRobot","index","state","robotList","findIndex","robot","id","setState","url","fetch","then","res","json","resJSON","console","log","robotTypes","tasks","addRobot","bodyData","name","formData","type","method","headers","body","JSON","stringify","assignRobotTasks","robotId","forEach","task","push","i","taskId","completed","timeAssigned","timeFinished","elapsedTime","getFullRobots","editRobot","deleteRobot","newRobotList","filter","selectedRobot","fullRobots","renderRobots","renderModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Home from './components/home/Home';\n// import Button from './components/button/Button';\n// import Robot from './components/robot/Robot';\n// import Form from './components/form/Form';\n// import EditForm from './components/form/EditForm';\nimport './Globals.css';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      robotList: null,\n      robotTypes: null,\n      tasks: null,\n      // showAddModal: false,\n      // showEditModal: false,\n      selectedRobot: null,\n\n      fullRobots: null,\n\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    }\n  }\n\n  componentWillMount = () => {\n    this.fetchRobots();\n    this.fetchRobotTypes();\n    this.fetchTasks();\n\n    this.fetchFullRobot();\n  };\n\n  generateId = () => {\n    return Math.floor(Math.random() * 10000) + 1;\n  }\n\n\n  // addRobotToState = (newRobot) => {\n  //   let updatedRobots = [...this.state.robotList, newRobot];\n  //   this.setState({robotList: updatedRobots});\n  // }\n\n  updateRobotsInState = (updatedRobot) => {\n    const index = this.state.robotList.findIndex(robot => robot.id === updatedRobot.id);    \n\n    const robotList = [...this.state.robotList];\n    robotList[index] = updatedRobot;\n\n    this.setState({robotList});    \n  }\n\n\n  // renderModal = () => {\n  //   if(this.state.showAddModal === true) {\n  //     return <Form formData={this.state.formData} addRobot={this.addRobot} handleChange={this.handleChange} robotTypes={this.state.robotTypes} closeModal={this.closeModal} />\n\n  //   } else if(this.state.showEditModal === true) {\n\n  //      return <EditForm robot={this.state.selectedRobot}  editRobot={this.editRobot} handleChange={this.handleChange} robotTypes={this.state.robotTypes} closeModal={this.closeModal} />     \n  //   }\n  // }\n\n  // handleBtnClick = (formType, robot) => {\n  //   if(formType === \"add\" && this.state.showAddModal === false) {\n  //     this.setState({showAddModal: true});\n  //   }\n\n  //   if(formType === \"edit\" && this.state.showEditModal === false) {\n  //     this.setState({\n  //       showEditModal: true,\n  //       selectedRobot: robot\n  //     });\n  //   }\n\n  // }\n\n  // closeModal = (e, formType) => {\n  //   e.preventDefault();\n    \n\n  //   if(formType === \"add\" && this.state.showAddModal === true) {\n  //     this.setState({showAddModal: false});\n  //   } else if (formType === \"edit\" && this.state.showEditModal === true) {\n  //     this.setState({showEditModal: false});\n  //   }\n  // }\n\n  // renderRobots = () => {\n  //   if(this.state.robotList !== null) {\n      \n  //     const robotList = this.state.robotList.map((robot) => {\n  //       return <Robot handleBtnClick={this.handleBtnClick} deleteRobot={this.deleteRobot} robot={robot} key={robot.name} />\n  //     });\n  //     return robotList;\n\n  //   } else {\n  //     return null;\n  //   }\n  // }\n\n  // handleChange = (e, name) => {\n  //   let formData = this.state.formData;\n\n  //   formData[name] = e.target.value;\n  //   this.setState({formData});\n  //   console.log(this.state.formData);\n  // }\n\n\n/*---------------------------*/\n//         API CALLS\n/*---------------------------*/\n\n\n  fetchRobots = () => {\n    const url = \"http://localhost:5000/robots\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });\n  }\n\n  fetchFullRobot = () => {\n    const url = \"http://localhost:5000/robots/full\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        console.log(resJSON);\n      });    \n  }\n\n/////////////////////\n  fetchRobotTypes = () => {\n    const url = \"http://localhost:5000/types\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotTypes: resJSON});\n      });    \n  }\n\n/////////////////////\n  fetchTasks = () => {\n    const url = \"http://localhost:5000/tasks\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({tasks: resJSON});\n      }).then(() => {\n        // this.assignRobotTasks();\n      }); \n  }\n\n/////////////////////\n  addRobot = () => {\n\n    this.setState({})\n\n    const bodyData = {\n      id: this.generateId(),\n      name: this.state.formData.name,\n      type: this.state.formData.type\n    };\n\n    fetch(\"http://localhost:5000/robots\", {\n      method: 'POST',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(bodyData)\n\n    }).then((res) => {\n      return res.json(); \n\n    }).then ((resJSON) => {\n      this.assignRobotTasks(bodyData.id);\n    });\n  }\n\n//////////////////\n  assignRobotTasks = (robotId) => {\n    const tasks = [];\n    const url = \"http://localhost:5000/tasks/random\";\n    \n    fetch(url)\n      .then((res) => {\n        return res.json();\n      }).then((resJSON) => {\n        \n        resJSON.forEach(task => {\n          tasks.push(task);\n        });\n      }).then(() => {\n\n        for(let i = 0; i < 5; i++) {\n          // const currentDate = new Date();\n          // const time = `${currentDate.getHours()}${currentDate.getMinutes()}${currentDate.getSeconds()}`;\n\n          const bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n            completed: 0,\n            timeAssigned: 222222,\n            timeFinished: 0,\n            elapsedTime: null\n          };\n\n          console.log(\"BEFORE FETCH\");\n          fetch(\"http://localhost:5000/robots/full\", {\n                method: 'POST',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(bodyData)\n\n              }).then((res) => {\n                console.log(\"INSIDE FETCH\");\n                return res.json(); \n\n              });\n        }\n          console.log(\"AFTER FETCH\");\n      })\n  }\n\n/////////////////////\n  getFullRobots = () => {\n   const url = \"http://localhost:5000/robots/full\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });    \n  }\n\n\n/////////////////////\n  editRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'PUT',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.state.formData)\n      }).then(res => {\n        return res.json();\n      }).then((resJSON) => {\n        this.updateRobotsInState(resJSON);\n      });\n\n    }\n  }\n\n\n\n/////////////////////\n  deleteRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'DELETE',\n      }).then(res => {\n        console.log(\"Deleted Robot\");\n        return res.json();\n\n      }).then(() => {\n        const newRobotList = this.state.robotList.filter(robot => robot.id !== id);\n\n        this.setState({robotList: newRobotList});\n      });\n    }\n  }\n\n/*---------------------------*/\n//            \n/*---------------------------*/\n\n\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <Home  renderRobots={this.renderRobots} renderModal={this.renderModal} />\n\n        {/* <h1>Bot-O-Mat</h1>\n        {this.renderModal()}\n\n        <div className=\"contentContainer\">\n          <Button handleBtnClick={this.handleBtnClick} text=\"Add Robot\"/>\n\n          <div className=\"robotListContainer\">\n            {this.renderRobots()}\n          </div>  \n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}