{"ast":null,"code":"import _classCallCheck from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/components/form/EditForm.js\";\nimport React, { Component } from 'react';\nimport '../../Globals.css';\nimport './Form.css';\n\nvar EditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditForm, _Component);\n\n  function EditForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.componentWillMount = function () {\n      var url = \"http://localhost:5000/robots/\".concat(_this.props.robot.id);\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robot: resJSON\n        });\n      });\n    };\n\n    _this.renderTypes = function () {\n      if (_this.props.robotTypes !== null) {\n        var typeList = _this.props.robotTypes.map(function (type, index) {\n          return React.createElement(\"option\", {\n            key: index,\n            value: type.value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21\n            },\n            __self: this\n          }, type.name);\n        });\n\n        return typeList;\n      } else {\n        return null;\n      }\n    };\n\n    _this.getEditingRobot = function (id) {\n      var url = \"http://localhost:5000/robots/\".concat(id);\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robot: resJSON\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EditForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"EditForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick(e) {\n          return _this2.props.closeModal(e, \"edit\");\n        },\n        className: \"closeBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Edit the Robot\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Robot's Name:\"), React.createElement(\"input\", {\n        value: this.props.robot.name,\n        onChange: function onChange(e) {\n          return _this2.props.handleChange(e, 'name');\n        },\n        type: \"text\",\n        id: \"name\",\n        name: \"robotName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Robot's Type:\"), React.createElement(\"select\", {\n        value: this.props.robot.type,\n        onChange: function onChange(e) {\n          return _this2.props.handleChange(e, 'type');\n        },\n        id: \"type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.renderTypes()))), React.createElement(\"div\", {\n        className: \"btnContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.props.editRobot(_this2.props.robot.id);\n        },\n        className: \"createBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Change Robot\"))));\n    }\n  }]);\n\n  return EditForm;\n}(Component);\n\nexport default EditForm;","map":{"version":3,"sources":["/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/components/form/EditForm.js"],"names":["React","Component","EditForm","componentWillMount","url","props","robot","id","fetch","then","res","json","resJSON","setState","renderTypes","robotTypes","typeList","map","type","index","value","name","getEditingRobot","e","closeModal","handleChange","editRobot"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../../Globals.css';\nimport './Form.css';\n\nclass EditForm extends Component {\n\n  componentWillMount = () => {  \n\n    const url = `http://localhost:5000/robots/${this.props.robot.id}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robot: resJSON});\n      }); \n  }\n\n  renderTypes = () => {\n    if(this.props.robotTypes !== null) {\n      const typeList = this.props.robotTypes.map((type, index) => {\n        return <option key={index} value={type.value}>{type.name}</option>\n      });\n      return typeList;\n\n    } else {\n      return null;\n    }\n  }\n\n  getEditingRobot = (id) => {\n    const url = `http://localhost:5000/robots/${id}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robot: resJSON});\n      });    \n  }\n\n  render() {\n\n    return (\n      <div className=\"EditForm\">\n        <form>\n          <button onClick={(e) => this.props.closeModal(e, \"edit\")} className=\"closeBtn\">X</button>\n\n          <fieldset>\n            <legend>Edit the Robot</legend>\n\n            <p>\n              <label htmlFor=\"name\">Robot's Name:</label>\n              <input value={this.props.robot.name} onChange={(e) => this.props.handleChange(e, 'name')} type=\"text\" id=\"name\" name=\"robotName\"/>\n            </p>\n\n            <p>\n              <label htmlFor=\"type\">Robot's Type:</label>\n              <select value={this.props.robot.type} onChange={(e) => this.props.handleChange(e, 'type')} id=\"type\">\n                {this.renderTypes()}\n              </select>\n            </p>\n          </fieldset>\n\n          <div className=\"btnContainer\">\n            <button onClick={() => this.props.editRobot(this.props.robot.id)} className=\"createBtn\">Change Robot</button>\n          </div>\n\n        </form>\n\n      </div>\n    );\n  }\n}\n\nexport default EditForm;\n"]},"metadata":{},"sourceType":"module"}