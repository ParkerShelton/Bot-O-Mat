{"ast":null,"code":"import _toConsumableArray from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/src/app/App.js\";\nimport React, { Component } from 'react';\nimport Home from './components/home/Home';\nimport Header from './components/header/Header';\nimport './Globals.css';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.componentWillMount = function () {\n      _this.fetchFullRobots();\n\n      _this.fetchRobotTypes();\n    };\n\n    _this.generateId = function () {\n      return Math.floor(Math.random() * 10000) + 1;\n    };\n\n    _this.addRobotToState = function (newRobot) {\n      var updatedRobots = _toConsumableArray(_this.state.robotList).concat([newRobot]);\n\n      _this.setState({\n        robotList: updatedRobots\n      });\n    };\n\n    _this.updateRobotsInState = function (updatedRobot) {\n      var index = _this.state.robotList.findIndex(function (robot) {\n        return robot.id === updatedRobot.id;\n      });\n\n      var robotList = _toConsumableArray(_this.state.robotList);\n\n      robotList[index] = updatedRobot;\n\n      _this.setState({\n        robotList: robotList\n      });\n    };\n\n    _this.handleChange = function (e, name) {\n      var formData = _this.state.formData;\n      formData[name] = e.target.value;\n\n      _this.setState({\n        formData: formData\n      });\n\n      console.log(_this.state.formData);\n    };\n\n    _this.fetchFullRobots = function () {\n      var url = \"http://localhost:5000/robots/full\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.fetchRobotTypes = function () {\n      var url = \"http://localhost:5000/types\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotTypes: resJSON\n        });\n      });\n    };\n\n    _this.addRobot = function () {\n      _this.setState({});\n\n      var bodyData = {\n        id: _this.generateId(),\n        name: _this.state.formData.name,\n        type: _this.state.formData.type,\n        place: 0,\n        score: 0\n      };\n      fetch(\"http://localhost:5000/robots\", {\n        method: 'POST',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(bodyData)\n      }).then(function (res) {\n        return res.json();\n      }).then(function () {\n        _this.assignRobotTasks(bodyData.id);\n      });\n    };\n\n    _this.assignRobotTasks = function (robotId) {\n      var tasks = [];\n      var url = \"http://localhost:5000/tasks/random\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        resJSON.forEach(function (task) {\n          tasks.push(task);\n        });\n      }).then(function () {\n        console.log(tasks);\n\n        for (var i = 0; i < 5; i++) {\n          var bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id\n          };\n          fetch(\"http://localhost:5000/robots/full\", {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(bodyData)\n          }).then(function (res) {\n            // this.addRobotToState(res)\n            return res.json();\n          });\n        }\n      });\n    };\n\n    _this.editRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'PUT',\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(_this.state.formData)\n        }).then(function (res) {\n          return res.json();\n        }).then(function (resJSON) {\n          _this.updateRobotsInState(resJSON);\n        });\n      }\n    };\n\n    _this.deleteRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'DELETE'\n        }).then(function (res) {\n          console.log(\"Deleted Robot\");\n          return res.json();\n        }).then(function () {\n          var newRobotList = _this.state.robotList.filter(function (robot) {\n            return robot.id !== id;\n          });\n\n          _this.setState({\n            robotList: newRobotList\n          });\n        });\n      }\n    };\n\n    _this.state = {\n      robotList: null,\n      robotTypes: null,\n      selectedRobot: null,\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*---------------------------*/\n    //            \n\n    /*---------------------------*/\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"contentContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(Home, {\n        formData: this.state.formData,\n        robotList: this.state.robotList,\n        robotTypes: this.state.robotTypes,\n        renderRobots: this.renderRobots,\n        renderModal: this.renderModal,\n        handleChange: this.handleChange,\n        addRobot: this.addRobot,\n        deleteRobot: this.deleteRobot,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/src/app/App.js"],"names":["React","Component","Home","Header","App","props","componentWillMount","fetchFullRobots","fetchRobotTypes","generateId","Math","floor","random","addRobotToState","newRobot","updatedRobots","state","robotList","setState","updateRobotsInState","updatedRobot","index","findIndex","robot","id","handleChange","e","name","formData","target","value","console","log","url","fetch","then","res","json","resJSON","robotTypes","addRobot","bodyData","type","place","score","method","headers","body","JSON","stringify","assignRobotTasks","robotId","tasks","forEach","task","push","i","taskId","editRobot","deleteRobot","newRobotList","filter","selectedRobot","renderRobots","renderModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Home from './components/home/Home';\nimport Header from './components/header/Header';\nimport './Globals.css';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      robotList: null,\n      robotTypes: null,\n      selectedRobot: null,\n\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    }\n  }\n\n  componentWillMount = () => {\n    this.fetchFullRobots();\n    this.fetchRobotTypes();\n  };\n\n  generateId = () => {\n    return Math.floor(Math.random() * 10000) + 1;\n  }\n\n\n  addRobotToState = (newRobot) => {\n    let updatedRobots = [...this.state.robotList, newRobot];\n    this.setState({robotList: updatedRobots});\n  }\n\n  updateRobotsInState = (updatedRobot) => {\n    const index = this.state.robotList.findIndex(robot => robot.id === updatedRobot.id);    \n\n    const robotList = [...this.state.robotList];\n    robotList[index] = updatedRobot;\n\n    this.setState({robotList});    \n  }\n\n  handleChange = (e, name) => {\n    let formData = this.state.formData;\n\n    formData[name] = e.target.value;\n    this.setState({formData});\n    console.log(this.state.formData);\n  }\n\n\n/*---------------------------*/\n//         API CALLS\n/*---------------------------*/\n\n\n/////////////////////\n  fetchFullRobots = () => {\n   const url = \"http://localhost:5000/robots/full\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });    \n  }\n\n/////////////////////\n  fetchRobotTypes = () => {\n    const url = \"http://localhost:5000/types\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotTypes: resJSON});\n      });    \n  }\n\n\n/////////////////////\n  addRobot = () => {\n\n    this.setState({})\n\n    const bodyData = {\n      id: this.generateId(),\n      name: this.state.formData.name,\n      type: this.state.formData.type,\n      place: 0,\n      score: 0\n    };\n\n    fetch(\"http://localhost:5000/robots\", {\n      method: 'POST',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(bodyData)\n\n    }).then((res) => {\n      return res.json(); \n\n    }).then (() => {\n      this.assignRobotTasks(bodyData.id);\n    });\n  }\n\n//////////////////\n  assignRobotTasks = (robotId) => {\n    const tasks = [];\n    const url = \"http://localhost:5000/tasks/random\";\n    \n    fetch(url)\n      .then((res) => {\n        return res.json();\n      }).then((resJSON) => {\n        \n        resJSON.forEach(task => {\n          tasks.push(task);\n        });\n      }).then(() => {\n\n        console.log(tasks);\n        for(let i = 0; i < 5; i++) {\n\n          const bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n          };\n\n\n          fetch(\"http://localhost:5000/robots/full\", {\n                method: 'POST',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(bodyData)\n\n              }).then((res) => {\n                // this.addRobotToState(res)\n                return res.json(); \n              });\n        }\n      })\n  }\n\n\n/////////////////////\n  editRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'PUT',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.state.formData)\n      }).then(res => {\n        return res.json();\n      }).then((resJSON) => {\n        this.updateRobotsInState(resJSON);\n      });\n\n    }\n  }\n\n\n\n/////////////////////\n  deleteRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'DELETE',\n      }).then(res => {\n        console.log(\"Deleted Robot\");\n        return res.json();\n\n      }).then(() => {\n        const newRobotList = this.state.robotList.filter(robot => robot.id !== id);\n\n        this.setState({robotList: newRobotList});\n      });\n    }\n  }\n/*---------------------------*/\n//            \n/*---------------------------*/\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <div className=\"contentContainer\">\n          <Home \n            formData={this.state.formData} \n            robotList={this.state.robotList} \n            robotTypes={this.state.robotTypes}\n            renderRobots={this.renderRobots} \n            renderModal={this.renderModal} \n            handleChange={this.handleChange}\n            addRobot={this.addRobot}\n            deleteRobot={this.deleteRobot}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}