{"ast":null,"code":"import _toConsumableArray from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/src/app/App.js\";\nimport React, { Component } from 'react';\nimport Home from './components/home/Home';\nimport './Globals.css';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.componentWillMount = function () {\n      _this.fetchFullRobots();\n\n      _this.fetchRobotTypes();\n    };\n\n    _this.generateId = function () {\n      return Math.floor(Math.random() * 10000) + 1;\n    };\n\n    _this.taskCompleted = function (selectedRobotId, selectedTaskId) {\n      for (var i = 0; i < _this.state.robotList.length; i++) {\n        if (_this.state.robotList[i].id === selectedRobotId) {\n          for (var j = 0; j < 5; j++) {\n            if (_this.state.robotList[i].tasks[j].id === selectedTaskId) {\n              var updatedRobotList = _this.state.robotList;\n              updatedRobotList[i].tasks[j].isCompleted = 1;\n              updatedRobotList[i].score += updatedRobotList[i].tasks[j].points;\n\n              if (updatedRobotList[i].completed < 5) {\n                updatedRobotList[i].completed++;\n              }\n\n              if (updatedRobotList[i].remaining > 0) {\n                updatedRobotList[i].remaining--;\n              }\n\n              _this.setState({\n                robotList: updatedRobotList\n              });\n            }\n          }\n        }\n      }\n    };\n\n    _this.addRobotToState = function (newRobot) {\n      // let updatedRobots = [...this.state.robotList, newRobot];\n      var updatedRobots = _this.state.robotList;\n      updatedRobots.push(newRobot);\n\n      _this.setState({\n        robotList: updatedRobots\n      });\n    };\n\n    _this.updateRobotsInState = function (updatedRobot) {\n      var index = _this.state.robotList.findIndex(function (robot) {\n        return robot.id === updatedRobot.id;\n      });\n\n      var robotList = _toConsumableArray(_this.state.robotList);\n\n      robotList[index] = updatedRobot;\n\n      _this.setState({\n        robotList: robotList\n      });\n    };\n\n    _this.handleChange = function (e, name) {\n      var formData = _this.state.formData;\n      formData[name] = e.target.value;\n\n      _this.setState({\n        formData: formData\n      });\n\n      console.log(_this.state.formData);\n    };\n\n    _this.fetchFullRobots = function () {\n      var url = \"http://localhost:5000/robots/full\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n\n        if (resJSON.length > 0) {\n          _this.setState({\n            showEmptyRobots: false\n          });\n        } else {\n          _this.setState({\n            showEmptyRobots: true\n          });\n        }\n      });\n    };\n\n    _this.fetchRobotTypes = function () {\n      var url = \"http://localhost:5000/types\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotTypes: resJSON\n        });\n      });\n    };\n\n    _this.fetchSingleRobot = function (robotId) {\n      var url = \"http://localhost:5000/robot/\".concat(robotId);\n      fetch(url).then(function (res) {\n        res.json();\n        console.log(res.json());\n      });\n    };\n\n    _this.addRobot = function () {\n      _this.setState({});\n\n      var bodyData = {\n        id: _this.generateId(),\n        name: _this.state.formData.name,\n        type: _this.state.formData.type,\n        place: 0,\n        score: 0\n      };\n      fetch(\"http://localhost:5000/robots\", {\n        method: 'POST',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(bodyData)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        // this.addRobotToState(resJSON);\n        _this.setState({\n          showEmptyRobots: false\n        });\n\n        _this.assignRobotTasks(bodyData.id);\n\n        _this.fetchSingleRobot(bodyData.id);\n      });\n    };\n\n    _this.assignRobotTasks = function (robotId) {\n      var tasks = [];\n      var url = \"http://localhost:5000/tasks/random\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        resJSON.forEach(function (task) {\n          tasks.push(task);\n        });\n      }).then(function () {\n        for (var i = 0; i < 5; i++) {\n          var bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id\n          };\n          fetch(\"http://localhost:5000/robots/full\", {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(bodyData)\n          }).then(function (res) {\n            return res.json();\n          });\n        }\n      });\n    };\n\n    _this.editRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'PUT',\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(_this.state.formData)\n        }).then(function (res) {\n          return res.json();\n        }).then(function (resJSON) {\n          _this.updateRobotsInState(resJSON);\n        });\n      }\n    };\n\n    _this.deleteRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'DELETE'\n        }).then(function (res) {\n          console.log(\"Deleted Robot\");\n          return res.json();\n        }).then(function () {\n          var newRobotList = _this.state.robotList.filter(function (robot) {\n            return robot.id !== id;\n          });\n\n          _this.setState({\n            robotList: newRobotList\n          });\n\n          if (_this.state.robotList.length > 0) {\n            _this.setState({\n              showEmptyRobots: false\n            });\n          } else {\n            _this.setState({\n              showEmptyRobots: true\n            });\n          }\n        });\n      }\n    };\n\n    _this.state = {\n      robotList: null,\n      robotTypes: null,\n      selectedRobot: null,\n      showEmptyRobots: true,\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*---------------------------*/\n    //            \n\n    /*---------------------------*/\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"contentContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(Home, {\n        formData: this.state.formData,\n        robotList: this.state.robotList,\n        robotTypes: this.state.robotTypes,\n        renderRobots: this.renderRobots,\n        renderModal: this.renderModal,\n        handleChange: this.handleChange,\n        addRobot: this.addRobot,\n        deleteRobot: this.deleteRobot,\n        taskCompleted: this.taskCompleted,\n        showEmptyRobots: this.state.showEmptyRobots,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/parkersheltonr2h/Bot-O-Mat/bot-o-mat/src/app/App.js"],"names":["React","Component","Home","App","props","componentWillMount","fetchFullRobots","fetchRobotTypes","generateId","Math","floor","random","taskCompleted","selectedRobotId","selectedTaskId","i","state","robotList","length","id","j","tasks","updatedRobotList","isCompleted","score","points","completed","remaining","setState","addRobotToState","newRobot","updatedRobots","push","updateRobotsInState","updatedRobot","index","findIndex","robot","handleChange","e","name","formData","target","value","console","log","url","fetch","then","res","json","resJSON","showEmptyRobots","robotTypes","fetchSingleRobot","robotId","addRobot","bodyData","type","place","method","headers","body","JSON","stringify","assignRobotTasks","forEach","task","taskId","editRobot","deleteRobot","newRobotList","filter","selectedRobot","renderRobots","renderModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Home from './components/home/Home';\nimport './Globals.css';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      robotList: null,\n      robotTypes: null,\n      selectedRobot: null,\n      showEmptyRobots: true,\n\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    }\n  }\n\n  componentWillMount = () => {\n    this.fetchFullRobots();\n    this.fetchRobotTypes();\n  };\n\n  // componentDidMount = () => {\n  //   if(this.state.robotList !== null){\n  //     if(this.state.robotList.length > 0) {\n  //       console.log(\"greater than 0\");\n  //       this.setState({showEmptyRobots: false});\n  //     } else {\n  //       this.setState({showEmptyRobots: true});\n  //     }        \n  //   }  \n  // }\n\n  generateId = () => {\n    return Math.floor(Math.random() * 10000) + 1;\n  }\n\n\n  taskCompleted = (selectedRobotId, selectedTaskId) => {\n    for(var i = 0; i < this.state.robotList.length; i++) {\n\n      if(this.state.robotList[i].id === selectedRobotId) {\n        for(var j = 0; j < 5; j++) {\n\n          if(this.state.robotList[i].tasks[j].id === selectedTaskId) {\n            let updatedRobotList = this.state.robotList;\n\n            updatedRobotList[i].tasks[j].isCompleted = 1\n            updatedRobotList[i].score += updatedRobotList[i].tasks[j].points;\n\n            if(updatedRobotList[i].completed < 5) {\n              updatedRobotList[i].completed ++;\n            }\n            if(updatedRobotList[i].remaining > 0) {\n              updatedRobotList[i].remaining --;\n            }\n\n            this.setState({\n              robotList: updatedRobotList\n            });\n          }\n        }\n      }\n    }\n\n  }\n\n\n  addRobotToState = (newRobot) => {\n    // let updatedRobots = [...this.state.robotList, newRobot];\n    let updatedRobots = this.state.robotList;\n    updatedRobots.push(newRobot);\n    this.setState({robotList: updatedRobots});\n  }\n\n  updateRobotsInState = (updatedRobot) => {\n    const index = this.state.robotList.findIndex(robot => robot.id === updatedRobot.id);    \n\n    const robotList = [...this.state.robotList];\n    robotList[index] = updatedRobot;\n\n    this.setState({robotList});    \n  }\n\n  handleChange = (e, name) => {\n    let formData = this.state.formData;\n\n    formData[name] = e.target.value;\n    this.setState({formData});\n    console.log(this.state.formData);\n  }\n\n\n/*---------------------------*/\n//         API CALLS\n/*---------------------------*/\n\n\n/////////////////////\n  fetchFullRobots = () => {\n   const url = \"http://localhost:5000/robots/full\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n\n        if(resJSON.length > 0) {\n          this.setState({showEmptyRobots: false});\n        } else {\n          this.setState({showEmptyRobots: true});\n        } \n      });    \n  }\n\n/////////////////////\n  fetchRobotTypes = () => {\n    const url = \"http://localhost:5000/types\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotTypes: resJSON});\n      });    \n  }\n\n  fetchSingleRobot = (robotId) => {\n    const url = `http://localhost:5000/robot/${robotId}`;\n\n    fetch(url)\n      .then((res) => {\n        res.json()\n        console.log(res.json())\n      });    \n  }\n\n\n/////////////////////\n  addRobot = () => {\n\n    this.setState({})\n\n    const bodyData = {\n      id: this.generateId(),\n      name: this.state.formData.name,\n      type: this.state.formData.type,\n      place: 0,\n      score: 0\n    };\n\n    fetch(\"http://localhost:5000/robots\", {\n      method: 'POST',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(bodyData)\n\n    }).then((res) => {\n      return res.json(); \n\n    }).then ((resJSON) => {\n      // this.addRobotToState(resJSON);\n      this.setState({showEmptyRobots: false});\n      this.assignRobotTasks(bodyData.id);\n      this.fetchSingleRobot(bodyData.id);\n    });\n  }\n\n//////////////////\n  assignRobotTasks = (robotId) => {\n    const tasks = [];\n    const url = \"http://localhost:5000/tasks/random\";\n    \n    fetch(url)\n      .then((res) => {\n        return res.json();\n      }).then((resJSON) => {\n        \n        resJSON.forEach(task => {\n          tasks.push(task);\n        });\n      }).then(() => {\n\n        for(let i = 0; i < 5; i++) {\n\n          const bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n          };\n\n\n          fetch(\"http://localhost:5000/robots/full\", {\n                method: 'POST',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(bodyData)\n\n              }).then((res) => res.json());\n        }\n      })\n  }\n\n\n/////////////////////\n  editRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'PUT',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.state.formData)\n      }).then(res => {\n        return res.json();\n      }).then((resJSON) => {\n        this.updateRobotsInState(resJSON);\n      });\n\n    }\n  }\n\n\n\n/////////////////////\n  deleteRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'DELETE',\n      }).then(res => {\n        console.log(\"Deleted Robot\");\n        return res.json();\n\n      }).then(() => {\n        const newRobotList = this.state.robotList.filter(robot => robot.id !== id);\n\n        this.setState({robotList: newRobotList});\n\n        if(this.state.robotList.length > 0) {\n          this.setState({showEmptyRobots: false});\n        } else {\n          this.setState({showEmptyRobots: true});\n        }\n      });\n    }\n  }\n/*---------------------------*/\n//            \n/*---------------------------*/\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"contentContainer\">\n          <Home \n            formData={this.state.formData} \n            robotList={this.state.robotList} \n            robotTypes={this.state.robotTypes}\n            renderRobots={this.renderRobots} \n            renderModal={this.renderModal} \n            handleChange={this.handleChange}\n            addRobot={this.addRobot}\n            deleteRobot={this.deleteRobot}\n            taskCompleted={this.taskCompleted}\n            showEmptyRobots={this.state.showEmptyRobots}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}