{"ast":null,"code":"import _classCallCheck from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/App.js\";\nimport React, { Component } from 'react';\nimport Button from './components/button/Button';\nimport Robot from './components/robot/Robot';\nimport Form from './components/form/Form';\nimport EditForm from './components/editForm/EditForm';\nimport './Globals.css';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.fetchRobots();\n\n      _this.fetchRobotTypes();\n\n      _this.fetchTasks();\n    };\n\n    _this.generateId = function () {\n      return Math.floor(Math.random() * 10000) + 1;\n    };\n\n    _this.renderModal = function () {\n      if (_this.state.showAddModal === true) {\n        return React.createElement(Form, {\n          addRobot: _this.addRobot,\n          handleChange: _this.handleChange,\n          robotTypes: _this.state.robotTypes,\n          closeModal: _this.closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      } else if (_this.state.showEditModal === true) {}\n    };\n\n    _this.handleBtnClick = function (formType) {\n      if (formType === \"add\" && _this.state.showAddModal === false) {\n        _this.setState({\n          showAddModal: true\n        });\n      }\n\n      if (formType === \"edit\" && _this.state.showEditModal === false) {\n        _this.setState({\n          showEditModal: true\n        });\n      }\n    };\n\n    _this.closeModal = function (e) {\n      e.preventDefault();\n\n      if (_this.state.showAddModal === true) {\n        _this.setState({\n          showAddModal: false\n        });\n      }\n    };\n\n    _this.renderRobots = function () {\n      if (_this.state.robotList !== null) {\n        var robotList = _this.state.robotList.map(function (robot) {\n          return React.createElement(Robot, {\n            editRobot: _this.editRobot,\n            deleteRobot: _this.deleteRobot,\n            robot: robot,\n            key: robot.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          });\n        });\n\n        return robotList;\n      } else {\n        return null;\n      }\n    };\n\n    _this.handleChange = function (e, name) {\n      var formData = _this.state.formData;\n      formData[name] = e.target.value;\n\n      _this.setState({\n        formData: formData\n      });\n\n      console.log(_this.state.formData);\n    };\n\n    _this.fetchRobots = function () {\n      var url = \"http://localhost:5000/robots\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.fetchRobotTypes = function () {\n      var url = \"http://localhost:5000/types\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotTypes: resJSON\n        });\n      });\n    };\n\n    _this.fetchTasks = function () {\n      var url = \"http://localhost:5000/tasks\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          tasks: resJSON\n        });\n      }).then(function () {// this.assignRobotTasks();\n      });\n    };\n\n    _this.addRobot = function () {\n      var bodyData = {\n        id: _this.generateId(),\n        name: _this.state.formData.name,\n        type: _this.state.formData.type\n      };\n      fetch(\"http://localhost:5000/robots\", {\n        method: 'POST',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(bodyData)\n      }).then(function (res) {\n        return res.json();\n      }).then(function () {\n        _this.assignRobotTasks(bodyData.id);\n      });\n    };\n\n    _this.assignRobotTasks = function (robotId) {\n      var tasks = [];\n      var url = \"http://localhost:5000/tasks/random\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        resJSON.forEach(function (task) {\n          tasks.push(task);\n        });\n      }).then(function () {\n        for (var i = 0; i < 5; i++) {\n          var currentDate = new Date();\n          var time = \"\".concat(currentDate.getHours()).concat(currentDate.getMinutes()).concat(currentDate.getSeconds());\n          var bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n            completed: 0,\n            timeAssigned: time,\n            timeFinished: 0,\n            elapsedTime: null\n          };\n          return fetch(\"http://localhost:5000/robots/full\", {\n            method: 'POST',\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(bodyData)\n          }).then(function (res) {\n            console.log(\"IM HERE!!!\");\n            return res.json();\n          });\n        }\n      }).then(function (res) {\n        console.log(res);\n      });\n    };\n\n    _this.getFullRobots = function () {\n      var url = \"http://localhost:5000/robots/full\";\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (resJSON) {\n        _this.setState({\n          robotList: resJSON\n        });\n      });\n    };\n\n    _this.editRobot = function () {};\n\n    _this.deleteRobot = function (id) {\n      if (id !== null) {\n        var url = \"http://localhost:5000/robots/\".concat(id);\n        fetch(url, {\n          method: 'DELETE'\n        }).then(function (res) {\n          console.log(\"Deleted Robot\");\n          return res.json();\n        }).then(function () {\n          var newRobotList = _this.state.robotList.filter(function (robot) {\n            return robot.id !== id;\n          });\n\n          _this.setState({\n            robotList: newRobotList\n          });\n        });\n      }\n    };\n\n    _this.state = {\n      robotList: null,\n      robotTypes: null,\n      tasks: null,\n      showAddModal: false,\n      showEditModal: false,\n      lastId: null,\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*---------------------------*/\n    //            \n\n    /*---------------------------*/\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"Bot-O-Mat\"), this.renderModal(), React.createElement(\"div\", {\n        className: \"contentContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(Button, {\n        handleBtnClick: this.handleBtnClick,\n        text: \"Add Robot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"robotListContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, this.renderRobots())));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/parkersheltonr2h/Git/Bot-O-Mat/bot-o-mat/src/app/App.js"],"names":["React","Component","Button","Robot","Form","EditForm","App","props","componentDidMount","fetchRobots","fetchRobotTypes","fetchTasks","generateId","Math","floor","random","renderModal","state","showAddModal","addRobot","handleChange","robotTypes","closeModal","showEditModal","handleBtnClick","formType","setState","e","preventDefault","renderRobots","robotList","map","robot","editRobot","deleteRobot","name","formData","target","value","console","log","url","fetch","then","res","json","resJSON","tasks","bodyData","id","type","method","headers","body","JSON","stringify","assignRobotTasks","robotId","forEach","task","push","i","currentDate","Date","time","getHours","getMinutes","getSeconds","taskId","completed","timeAssigned","timeFinished","elapsedTime","getFullRobots","newRobotList","filter","lastId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from './components/button/Button';\nimport Robot from './components/robot/Robot';\nimport Form from './components/form/Form';\nimport EditForm from './components/editForm/EditForm';\nimport './Globals.css';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      robotList: null,\n      robotTypes: null,\n      tasks: null,\n      showAddModal: false,\n      showEditModal: false,\n      lastId: null,\n\n      formData: {\n        name: \"John Doe\",\n        type: \"UNIPEDAL\"\n      }\n    }\n  }\n\n  componentDidMount = () => {\n    this.fetchRobots();\n    this.fetchRobotTypes();\n    this.fetchTasks();\n  };\n\n\n  generateId = () => {\n    return Math.floor(Math.random() * 10000) + 1;\n  }\n\n\n  renderModal = () => {\n    if(this.state.showAddModal === true) {\n      return <Form addRobot={this.addRobot} handleChange={this.handleChange} robotTypes={this.state.robotTypes} closeModal={this.closeModal} />\n    } else if(this.state.showEditModal === true) {\n      \n    }\n  }\n\n  handleBtnClick = (formType) => {\n    if(formType === \"add\" && this.state.showAddModal === false) {\n      this.setState({showAddModal: true});\n    }\n\n    if(formType === \"edit\" && this.state.showEditModal === false) {\n      this.setState({showEditModal: true});\n    }\n  }\n\n  closeModal = (e) => {\n    e.preventDefault();\n    \n    if(this.state.showAddModal === true) {\n      this.setState({showAddModal: false});\n    }\n  }\n\n  renderRobots = () => {\n    if(this.state.robotList !== null) {\n      \n      const robotList = this.state.robotList.map((robot) => {\n        return <Robot editRobot={this.editRobot} deleteRobot={this.deleteRobot} robot={robot} key={robot.name} />\n      });\n      return robotList;\n\n    } else {\n      return null;\n    }\n  }\n\n  handleChange = (e, name) => {\n    let formData = this.state.formData;\n\n    formData[name] = e.target.value;\n    this.setState({formData});\n    console.log(this.state.formData);\n  }\n\n\n\n\n/*---------------------------*/\n//            API\n/*---------------------------*/\n\n  fetchRobots = () => {\n    const url = \"http://localhost:5000/robots\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });\n  }\n\n/////////////////////\n  fetchRobotTypes = () => {\n    const url = \"http://localhost:5000/types\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotTypes: resJSON});\n      });    \n  }\n\n/////////////////////\n  fetchTasks = () => {\n    const url = \"http://localhost:5000/tasks\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({tasks: resJSON});\n      }).then(() => {\n        // this.assignRobotTasks();\n      }); \n  }\n\n/////////////////////\n  addRobot = () => {\n\n    const bodyData = {\n      id: this.generateId(),\n      name: this.state.formData.name,\n      type: this.state.formData.type\n    };\n\n    fetch(\"http://localhost:5000/robots\", {\n      method: 'POST',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(bodyData)\n\n    }).then((res) => {\n      return res.json(); \n\n    }).then (() => {\n      this.assignRobotTasks(bodyData.id);\n    });\n  }\n\n//////////////////\n  assignRobotTasks = (robotId) => {\n    const tasks = [];\n    const url = \"http://localhost:5000/tasks/random\";\n    \n    fetch(url)\n      .then((res) => {\n        return res.json();\n      }).then((resJSON) => {\n        \n        resJSON.forEach(task => {\n          tasks.push(task);\n        });\n      }).then(() => {\n\n        for(let i = 0; i < 5; i++) {\n          const currentDate = new Date();\n          const time = `${currentDate.getHours()}${currentDate.getMinutes()}${currentDate.getSeconds()}`;\n\n          const bodyData = {\n            robotId: robotId,\n            taskId: tasks[i].id,\n            completed: 0,\n            timeAssigned: time,\n            timeFinished: 0,\n            elapsedTime: null\n          };\n      \n          return fetch(\"http://localhost:5000/robots/full\", {\n                method: 'POST',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(bodyData)\n\n              }).then((res) => {\n                console.log(\"IM HERE!!!\");\n                return res.json(); \n\n              });\n        }\n      }).then((res) => {\n        console.log(res);\n      })\n  }\n\n/////////////////////\n  getFullRobots = () => {\n   const url = \"http://localhost:5000/robots/full\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        this.setState({robotList: resJSON});\n      });    \n  }\n\n\n/////////////////////\n  editRobot = () => {\n\n  }\n\n\n\n/////////////////////\n  deleteRobot = (id) => {\n    if(id !== null) {\n      const url = `http://localhost:5000/robots/${id}`;\n\n      fetch(url, {\n        method: 'DELETE',\n      }).then(res => {\n        console.log(\"Deleted Robot\");\n        return res.json();\n\n      }).then(() => {\n        const newRobotList = this.state.robotList.filter(robot => robot.id !== id);\n\n        this.setState({robotList: newRobotList});\n      });\n    }\n  }\n\n/*---------------------------*/\n//            \n/*---------------------------*/\n\n\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <h1>Bot-O-Mat</h1>\n\n        {this.renderModal()}\n        \n        <div className=\"contentContainer\">\n          <Button handleBtnClick={this.handleBtnClick} text=\"Add Robot\"/>\n\n          <div className=\"robotListContainer\">\n            {this.renderRobots()}\n          </div>  \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}